\documentclass[a4paper,10pt,article,oneside,oldfontcommands]{memoir}
\let\subsubsection\subsection
\let\subsection\section
\let\section\chapter

\input{preamble.tex}
\noweboptions{longxref,breakcode}

\usepackage[noamsthm,notheorems]{beamerarticle}
\setjobnamebeamerversion{slides}

\usepackage{authblk}
\let\institute\affil

\title{%
  An \texttt{sc} compatible interface for \texttt{llm}
}
\author{%
  Daniel Bosk
}
\affil{%
  KTH EECS
}

\begin{document}
\maketitle

\begin{abstract}
  \input{abstract.tex}
\end{abstract}
\clearpage

\tableofcontents
\clearpage

@
\section{Introduction}

This is the documentation of the [[<<llm-sc.py>>]] Python 3 script.
It should provide an extra command for the [[llm]] package and command.

\subsection{Structural overview}

We use the standard structure for the script.
We have import statements at the top in the [[<<imports>>]] code block.
Then we have functions in the [[<<functions>>]] code block.
Finally, we have a [[main]] function which is run if the script is run directly 
but not if it is imported.
<<llm-sc.py>>=
#!/usr/bin/env python3

<<imports>>

<<constants>>

<<functions>>
@

\subsection{An example}\label{ExampleCmd}

Let's have a look at an example, the [[llm cmd]] command\footnote{%
  Authored by Simon Willison.
  Licensed under an Apache 2.0 license.
  URL: \url{https://github.com/simonw/llm-cmd}.
}.
\begin{minted}{python}
import click
import llm
import subprocess
from prompt_toolkit import PromptSession
from prompt_toolkit.lexers import PygmentsLexer
from prompt_toolkit.patch_stdout import patch_stdout
from pygments.lexers.shell import BashLexer

SYSTEM_PROMPT = """
Return only the command to be executed as a raw string, no string delimiters
wrapping it, no yapping, no markdown, no fenced code blocks, what you return
will be passed to subprocess.check_output() directly.
For example, if the user asks: undo last git commit
You return only: git reset --soft HEAD~1
""".strip()

@llm.hookimpl
def register_commands(cli):
    @cli.command()
    @click.argument("args", nargs=-1)
    @click.option("-m", "--model", default=None, help="Specify the model to use")
    @click.option("-s", "--system", help="Custom system prompt")
    @click.option("--key", help="API key to use")
    def cmd(args, model, system, key):
        """Generate and execute commands in your shell"""
        from llm.cli import get_default_model
        prompt = " ".join(args)
        model_id = model or get_default_model()
        model_obj = llm.get_model(model_id)
        if model_obj.needs_key:
            model_obj.key = llm.get_key(key, model_obj.needs_key, model_obj.key_env_var)
        result = model_obj.prompt(prompt, system=system or SYSTEM_PROMPT)
        interactive_exec(str(result))

def interactive_exec(command):
    session = PromptSession(lexer=PygmentsLexer(BashLexer))
    with patch_stdout():
        if '\n' in command:
            print("Multiline command - Meta-Enter or Esc Enter to execute")
            edited_command = session.prompt("> ", default=command, multiline=True)
        else:
            edited_command = session.prompt("> ", default=command)
    try:
        output = subprocess.check_output(
            edited_command, shell=True, stderr=subprocess.STDOUT
        )
        print(output.decode())
    except subprocess.CalledProcessError as e:
        print(f"Command failed with error (exit status {e.returncode}): {e.output.decode()}")
\end{minted}


\section{Registering the \texttt{sc} subcommand}

We see in the example (\cref{ExampleCmd}) that we have a function 
[[register_commands]] which registers the command in the [[llm]] CLI.
<<functions>>=
@llm.hookimpl
def register_commands(cli):
  """
  Registers the `sc` command in the `llm` CLI.
  """
  <<create [[sc]] command function and register in [[cli]]>>
<<imports>>=
import llm
@

While they use the [[click]] package to create the command, we will use the 
[[typer]] package.
Since [[typer]] builds on [[click]], we'll be able to integrate the [[typer]] 
code into [[click]]\footnote{%
  Fortunately, the [[typer]] documentation has a section on how to include a 
  [[typer]] app in a [[click]] app:
  \url{https://typer.tiangolo.com/tutorial/using-click/\#including-a-typer-app-in-a-click-app}.
}.
<<create [[sc]] command function and register in [[cli]]>>=
typer_cli = typer.Typer()

@typer_cli.command(name="sc")
def sc_cli(<<[[sc]] CLI args>>):
  """
  A smartcat (`sc`) interface for the `llm` CLI.
  """
  <<[[sc]] CLI body>>

cli.add_command(typer.main.get_command(typer_cli),
                name="sc")
<<imports>>=
import typer
@


\printbibliography{}

\appendix
\section{An index of the code blocks}
\nowebchunks

\end{document}
